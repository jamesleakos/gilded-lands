import { KeywordType, KeywordValueType } from '../../Enums/Keyword';
import AbilityKeywordRuntimeEntity from '../Entity/AbilityKeywordRuntimeEntity';
import RuntimeKeywordValue from './RuntimeKeywordValue';
import Condition from '../Condition/Condition';
import Stat from '../Stat/Stat';
import RuntimeCard from '../Card/RuntimeCard';
import GameState from '../Game/GameState';
import TargetableRuntimeEntity from '../Entity/TargetableRuntimeEntity';
import Effect from '../Effect/Effect';
import TargetInfo from '../Target/TargetInfo';
import StatBuff from '../Stat/StatBuff';
declare class RuntimeKeyword {
    myEntityInstanceId: number;
    keywordType: KeywordType;
    indexForUpgrades: number;
    description: string;
    isPermanent: boolean;
    duration: number;
    keywordValueList: RuntimeKeywordValue[];
    isActive: boolean;
    imageName: string;
    conditions: Condition[];
    setBaseData(myEntityInstanceId: number, keywordType: KeywordType, indexForUpgrades: number | null, description: string, isPermanent: boolean, duration: number, keywordValueList: RuntimeKeywordValue[], isActive: boolean, conditions: Condition[], imageName: string): void;
    onEndTurn(gameState: GameState): void;
    getKeywordValue(keywordValueType: KeywordValueType): number;
    getKeywordValues(keywordValueType: KeywordValueType): number[];
    addStatBuff(stat: Stat, statCard: RuntimeCard, gameState: GameState): StatBuff | null;
    preResolveEffect(myEnt: TargetableRuntimeEntity, e: Effect, sourceEntity: AbilityKeywordRuntimeEntity, gameState: GameState, targetInfoList: TargetInfo[]): void;
    postResolveEffect(myEnt: TargetableRuntimeEntity, e: Effect, sourceEntity: AbilityKeywordRuntimeEntity, gameState: GameState, targetInfoList: TargetInfo[]): void;
    private static keywordConstructors;
    static registerKeyword(type: KeywordType, ctor: new (myEntityId: number, keywordType: KeywordType, indexForUpgrades: number | null, setDescription: string, isPermanent: boolean, setDuration: number, keywordValueList: RuntimeKeywordValue[], isActive: boolean, conditions: Condition[], imageName: string) => RuntimeKeyword): void;
    static createRuntimeKeyword(myEntityId: number, keywordType: KeywordType, indexForUpgrades: number | null, setDescription: string, isPermanent: boolean, setDuration: number, keywordValueList: RuntimeKeywordValue[], isActive: boolean, conditions: Condition[], imageName: string): RuntimeKeyword;
    toJSON(): any;
    static fromRuntimeJSON(json: any): RuntimeKeyword;
    static fromLibraryJSON(json: any, myEntity: AbilityKeywordRuntimeEntity): RuntimeKeyword;
}
export default RuntimeKeyword;
